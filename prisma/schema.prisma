// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model NavItem {
  id          String   @id @default(cuid())
  title       String   @unique
  href        String? // Optional field
  disabled    Boolean? @default(false)
  external    Boolean? @default(false)
  icon        String? // Optional field
  label       String?
  description String? // Optional field
  listOrder   Int

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  items NavSubItem[] @relation("ParentItem")
}

model NavSubItem {
  id          String   @id @default(cuid())
  title       String   @unique
  href        String? // Optional field
  disabled    Boolean? @default(false)
  external    Boolean? @default(false)
  icon        String? // Optional field
  label       String?
  description String? // Optional field
  listOrder   Int

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  navItem  NavItem? @relation("ParentItem", fields: [parentId], references: [id])
  parentId String? // Foreign key for nesting
}

model Employee {
  id                 String   @id @default(uuid())
  firstName          String
  lastName           String
  email              String   @unique
  phoneNumber        String
  dateOfBirth        DateTime
  addressId          String?
  dateOfJoining      DateTime
  designationId      String
  reportsToId        String?
  salaryId           String?
  genderId           Int
  employeeTypeId     Int
  payFrequencyId     Int?
  employmentStatusId Int

  // Relation for managing department head
  departmentsHeaded  Department[] @relation("DepartmentHead")
  // Reverse relation to handle employees reporting to this employee
  employeesReporting Employee[]   @relation("EmployeeReports")

  employeeType     EmployeeType     @relation(fields: [employeeTypeId], references: [id])
  salary           Salary?          @relation(fields: [salaryId], references: [id])
  gender           Gender           @relation(fields: [genderId], references: [id])
  address          Address?         @relation(fields: [addressId], references: [id])
  employmentStatus EmploymentStatus @relation(fields: [employmentStatusId], references: [id])
  reportsTo        Employee?        @relation("EmployeeReports", fields: [reportsToId], references: [id])
  designation      Designation      @relation(fields: [designationId], references: [id])
  PayFrequency     PayFrequency?    @relation(fields: [payFrequencyId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  staff Employee[]
}

model EmployeeType {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  staff Employee[]
}

model Address {
  id         String @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String

  employees Employee[]

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Department {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  headId      String?

  head Employee? @relation("DepartmentHead", fields: [headId], references: [id])

  deletedAt   DateTime?
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  Designation Designation[]
}

model Designation {
  id           String  @id @default(uuid())
  title        String  @unique
  description  String?
  departmentId String

  employees Employee[]

  department Department @relation(fields: [departmentId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Salary {
  id           String       @id @default(uuid())
  baseAmount   Float
  currency     String
  payFrequency PayFrequency @relation(fields: [payFrequencyId], references: [id])
  bonuses      Float?
  deductions   Float?
  employees    Employee[]

  deletedAt      DateTime?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  payFrequencyId Int
}

model PayFrequency {
  id   Int    @id @default(autoincrement())
  name String @unique

  staff Employee[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Salary    Salary[]
}

model EmploymentStatus {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  staff Employee[]
}

model Board {
  id      String   @id @default(uuid())
  name    String
  columns Column[] @relation("BoardColumns")

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Column {
  id      String @id @default(uuid())
  name    String
  boardId String
  tasks   Task[] @relation("ColumnTasks")
  board   Board  @relation("BoardColumns", fields: [boardId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Task {
  id          String  @id @default(uuid())
  title       String
  description String?
  columnId    String
  column      Column  @relation("ColumnTasks", fields: [columnId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
